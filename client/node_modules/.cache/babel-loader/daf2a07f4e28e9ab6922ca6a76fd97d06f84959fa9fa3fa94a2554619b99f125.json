{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zaina\\\\OneDrive\\\\Skrivbord\\\\SocialPost-Project\\\\client\\\\src\\\\context\\\\PostsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/PostsContext.js\nimport React, { createContext, useContext, useState } from 'react';\nimport { makeRequest } from '../axios';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsContext = /*#__PURE__*/createContext();\nexport const usePosts = () => {\n  _s();\n  return useContext(PostsContext);\n};\n_s(usePosts, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const PostsProvider = ({\n  children\n}) => {\n  _s2();\n  const [posts, setPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [user, setUser] = useState([]);\n  const [relationship, setRelationship] = useState([]);\n  const [likes, setLikes] = useState({});\n  const fetchUser = async userId => {\n    try {\n      const response = await axios.get(`http://localhost:8000/api/users/${userId}`);\n      setUser(response.data);\n      console.log(response.data);\n    } catch (error) {\n      console.error('Failed to fetch user', error);\n    }\n  };\n  const fetchPosts = async userId => {\n    try {\n      const response = await makeRequest.get('/posts', {\n        params: {\n          userId\n        }\n      });\n      setPosts(response.data);\n    } catch (error) {\n      console.error('Failed to fetch posts', error);\n    }\n  };\n  const createPost = async newPost => {\n    try {\n      const response = await makeRequest.post('/posts', newPost);\n      setPosts(prevPosts => [response.data, ...prevPosts]);\n    } catch (error) {\n      console.error('Failed to create post', error);\n    }\n  };\n\n  /*   const deletePost = async (postId) => {\r\n      try {\r\n        await makeRequest.delete(`/posts/${postId}`);\r\n        setPosts((prevPosts) => prevPosts.filter(post => post.id !== postId));\r\n      } catch (error) {\r\n        console.error('Failed to delete post', error);\r\n      }\r\n    }; */\n\n  const fetchComments = async postId => {\n    try {\n      const response = await makeRequest.get('/comments', {\n        params: {\n          postId\n        }\n      });\n      // Anpassa till att bara hämta kommentarer för en specifik postId\n      setComments(response.data);\n    } catch (error) {\n      console.error('Failed to fetch comments', error);\n    }\n  };\n  const createComment = async newComment => {\n    try {\n      const response = await makeRequest.post('/comments', newComment);\n      // Uppdatera endast kommentarslistan för den specifika posten\n      setComments(prevComments => [response.data, ...prevComments]);\n    } catch (error) {\n      console.error('Failed to create comment', error);\n    }\n  };\n  const fetchLikes = async postId => {\n    try {\n      const response = await makeRequest.get('/likes', {\n        params: {\n          postId\n        }\n      });\n      setLikes(prevLikes => ({\n        ...prevLikes,\n        [postId]: response.data\n      }));\n    } catch (error) {\n      console.error('Failed to fetch likes', error);\n    }\n  };\n  const addLike = async (postId, userId) => {\n    try {\n      await makeRequest.post('/likes', {\n        postId\n      });\n      setLikes(prevLikes => ({\n        ...prevLikes,\n        [postId]: [...(prevLikes[postId] || []), userId]\n      }));\n    } catch (error) {\n      console.error('Failed to add like', error);\n    }\n  };\n  const removeLike = async (postId, userId) => {\n    try {\n      await makeRequest.delete('/likes', {\n        params: {\n          postId\n        }\n      });\n      setLikes(prevLikes => ({\n        ...prevLikes,\n        [postId]: (prevLikes[postId] || []).filter(id => id !== userId)\n      }));\n    } catch (error) {\n      console.error('Failed to remove like', error);\n    }\n  };\n  const deletePost = async postId => {\n    try {\n      await makeRequest.delete(`/posts/${postId}`);\n      setPosts(prevPosts => prevPosts.filter(post => post.id !== postId));\n    } catch (error) {\n      console.error('Failed to delete post', error);\n    }\n  };\n  const fetchRelationship = async userId => {\n    try {\n      const response = await makeRequest.get('/relationships', {\n        params: {\n          userId\n        }\n      });\n      setRelationship(response.data);\n    } catch (error) {\n      console.error('Failed to fetch relationship', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PostsContext.Provider, {\n    value: {\n      posts,\n      fetchPosts,\n      createPost,\n      deletePost,\n      createComment,\n      comments,\n      fetchComments,\n      fetchLikes,\n      likes,\n      addLike,\n      removeLike,\n      fetchUser,\n      user,\n      fetchRelationship\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s2(PostsProvider, \"dqM1hQZMA8/6QH8cJe5OnWLm8j4=\");\n_c = PostsProvider;\nvar _c;\n$RefreshReg$(_c, \"PostsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","makeRequest","axios","jsxDEV","_jsxDEV","PostsContext","usePosts","_s","PostsProvider","children","_s2","posts","setPosts","comments","setComments","user","setUser","relationship","setRelationship","likes","setLikes","fetchUser","userId","response","get","data","console","log","error","fetchPosts","params","createPost","newPost","post","prevPosts","fetchComments","postId","createComment","newComment","prevComments","fetchLikes","prevLikes","addLike","removeLike","delete","filter","id","deletePost","fetchRelationship","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/zaina/OneDrive/Skrivbord/SocialPost-Project/client/src/context/PostsContext.js"],"sourcesContent":["// src/context/PostsContext.js\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport { makeRequest } from '../axios';\r\nimport axios from 'axios';\r\nconst PostsContext = createContext();\r\n\r\nexport const usePosts = () => {\r\n  return useContext(PostsContext);\r\n};\r\n\r\nexport const PostsProvider = ({ children }) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [comments, setComments] = useState([]);\r\n  const [user, setUser] = useState([]);\r\n  const [relationship, setRelationship] = useState([]);\r\n  const [likes, setLikes] = useState({});\r\n  \r\n  const fetchUser = async (userId) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8000/api/users/${userId}`);\r\n      setUser(response.data);\r\n      console.log(response.data)\r\n    } catch (error) {\r\n      console.error('Failed to fetch user', error);\r\n    }\r\n  };\r\n  const fetchPosts = async (userId) => {\r\n    try {\r\n      const response = await makeRequest.get('/posts', { params: { userId } });\r\n      setPosts(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch posts', error);\r\n    }\r\n  };\r\n\r\n  const createPost = async (newPost) => {\r\n    try {\r\n      const response = await makeRequest.post('/posts', newPost);\r\n      setPosts((prevPosts) => [response.data, ...prevPosts]);\r\n    } catch (error) {\r\n      console.error('Failed to create post', error);\r\n    }\r\n  };\r\n\r\n/*   const deletePost = async (postId) => {\r\n    try {\r\n      await makeRequest.delete(`/posts/${postId}`);\r\n      setPosts((prevPosts) => prevPosts.filter(post => post.id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete post', error);\r\n    }\r\n  }; */\r\n\r\n  const fetchComments = async (postId) => {\r\n    try {\r\n      const response = await makeRequest.get('/comments', { params: { postId } });\r\n      // Anpassa till att bara hämta kommentarer för en specifik postId\r\n      setComments(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch comments', error);\r\n    }\r\n  };\r\n  \r\n  const createComment = async (newComment) => {\r\n    try {\r\n      const response = await makeRequest.post('/comments', newComment);\r\n      // Uppdatera endast kommentarslistan för den specifika posten\r\n      setComments((prevComments) => [response.data, ...prevComments]);\r\n    } catch (error) {\r\n      console.error('Failed to create comment', error);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  const fetchLikes = async (postId) => {\r\n    try {\r\n      const response = await makeRequest.get('/likes', { params: { postId } });\r\n      setLikes((prevLikes) => ({\r\n        ...prevLikes,\r\n        [postId]: response.data,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to fetch likes', error);\r\n    }\r\n  };\r\n\r\n  const addLike = async (postId, userId) => {\r\n    try {\r\n      await makeRequest.post('/likes', { postId });\r\n      setLikes((prevLikes) => ({\r\n        ...prevLikes,\r\n        [postId]: [...(prevLikes[postId] || []), userId],\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to add like', error);\r\n    }\r\n  };\r\n\r\n  const removeLike = async (postId, userId) => {\r\n    try {\r\n      await makeRequest.delete('/likes', { params: { postId } });\r\n      setLikes((prevLikes) => ({\r\n        ...prevLikes,\r\n        [postId]: (prevLikes[postId] || []).filter((id) => id !== userId),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to remove like', error);\r\n    }\r\n  };\r\n\r\n  const deletePost = async (postId) => {\r\n    try {\r\n      await makeRequest.delete(`/posts/${postId}`);\r\n      setPosts((prevPosts) => prevPosts.filter((post) => post.id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete post', error);\r\n    }\r\n  };\r\n\r\n  const fetchRelationship = async (userId) => {\r\n    try {\r\n      const response = await makeRequest.get('/relationships', { params: { userId } });\r\n      setRelationship(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch relationship', error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <PostsContext.Provider value={{ posts, fetchPosts, createPost, deletePost, createComment, comments, fetchComments, fetchLikes, likes, addLike, removeLike, fetchUser, user, fetchRelationship,  }}>\r\n      {children}\r\n    </PostsContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
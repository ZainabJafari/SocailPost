{"ast":null,"code":"// src/context/PostsContext.js\nimport React,{createContext,useContext,useState}from'react';import{makeRequest}from'../axios';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const PostsContext=/*#__PURE__*/createContext();export const usePosts=()=>{return useContext(PostsContext);};export const PostsProvider=_ref=>{let{children}=_ref;const[posts,setPosts]=useState([]);const[comments,setComments]=useState([]);const[relationship,setRelationship]=useState([]);const[likes,setLikes]=useState({});const[user,setUser]=useState(null);const fetchUser=async userId=>{try{const response=await axios.get(\"http://localhost:8000/api/users/\".concat(userId),{withCredentials:true});setUser(response.data);console.log(response.data);}catch(error){console.error('Failed to fetch user',error);}};const updateUser=async updatedUser=>{try{const response=await axios.put(\"http://localhost:8000/api/users/\".concat(user.id),updatedUser,{withCredentials:true});setUser(response.data);console.log('User updated successfully');}catch(error){console.error('Failed to update user',error);throw error;}};const fetchPosts=async userId=>{try{const response=await makeRequest.get('/posts',{params:{userId}});setPosts(response.data);}catch(error){console.error('Failed to fetch posts',error);}};const createPost=async newPost=>{try{const response=await makeRequest.post('/posts',newPost);setPosts(prevPosts=>[response.data,...prevPosts]);}catch(error){console.error('Failed to create post',error);}};/*   const deletePost = async (postId) => {\r\n    try {\r\n      await makeRequest.delete(`/posts/${postId}`);\r\n      setPosts((prevPosts) => prevPosts.filter(post => post.id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete post', error);\r\n    }\r\n  }; */const fetchComments=async postId=>{try{const response=await makeRequest.get('/comments',{params:{postId}});setComments(response.data);}catch(error){console.error('Failed to fetch comments',error);}};const createComment=async newComment=>{try{const response=await makeRequest.post('/comments',newComment);setComments(prevComments=>[response.data,...prevComments]);}catch(error){console.error('Failed to create comment',error);}};const fetchLikes=async postId=>{try{const response=await makeRequest.get('/likes',{params:{postId}});setLikes(prevLikes=>({...prevLikes,[postId]:response.data}));}catch(error){console.error('Failed to fetch likes',error);}};const addLike=async(postId,userId)=>{try{await makeRequest.post('/likes',{postId});setLikes(prevLikes=>({...prevLikes,[postId]:[...(prevLikes[postId]||[]),userId]}));}catch(error){console.error('Failed to add like',error);}};const removeLike=async(postId,userId)=>{try{await makeRequest.delete('/likes',{params:{postId}});setLikes(prevLikes=>({...prevLikes,[postId]:(prevLikes[postId]||[]).filter(id=>id!==userId)}));}catch(error){console.error('Failed to remove like',error);}};const deletePost=async postId=>{try{await makeRequest.delete(\"/posts/\".concat(postId));setPosts(prevPosts=>prevPosts.filter(post=>post.id!==postId));}catch(error){console.error('Failed to delete post',error);}};const fetchRelationship=async userId=>{try{const response=await axios.get('http://localhost:8000/api/relationships',{params:{userId}});setRelationship(response.data);}catch(error){console.error('Failed to fetch relationship',error);}};const addRelationship=async userId=>{try{await axios.post('http://localhost:8000/api/relationships',{userId});setRelationship(prev=>[...prev,userId]);}catch(error){console.error('Failed to add relationship',error);}};const removeRelationship=async userId=>{try{await axios.delete('http://localhost:8000/api/relationships',{params:{userId}});setRelationship(prev=>prev.filter(id=>id!==userId));}catch(error){console.error('Failed to remove relationship',error);}};return/*#__PURE__*/_jsx(PostsContext.Provider,{value:{posts,fetchPosts,createPost,deletePost,createComment,comments,fetchComments,fetchLikes,likes,addLike,removeLike,fetchUser,user,fetchRelationship,relationship,addRelationship,removeRelationship,updateUser},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","makeRequest","axios","jsx","_jsx","PostsContext","usePosts","PostsProvider","_ref","children","posts","setPosts","comments","setComments","relationship","setRelationship","likes","setLikes","user","setUser","fetchUser","userId","response","get","concat","withCredentials","data","console","log","error","updateUser","updatedUser","put","id","fetchPosts","params","createPost","newPost","post","prevPosts","fetchComments","postId","createComment","newComment","prevComments","fetchLikes","prevLikes","addLike","removeLike","delete","filter","deletePost","fetchRelationship","addRelationship","prev","removeRelationship","Provider","value"],"sources":["C:/Users/zaina/OneDrive/Skrivbord/SocialPost-Project/client/src/context/PostsContext.js"],"sourcesContent":["// src/context/PostsContext.js\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport { makeRequest } from '../axios';\r\nimport axios from 'axios';\r\nconst PostsContext = createContext();\r\n\r\nexport const usePosts = () => {\r\n  return useContext(PostsContext);\r\n};\r\n\r\nexport const PostsProvider = ({ children }) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [comments, setComments] = useState([]);\r\n  const [relationship, setRelationship] = useState([]);\r\n  const [likes, setLikes] = useState({});\r\n  \r\n  const [user, setUser] = useState(null);\r\n\r\n  const fetchUser = async (userId) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8000/api/users/${userId}`, { withCredentials: true });\r\n      setUser(response.data);\r\n      console.log(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch user', error);\r\n    }\r\n  };\r\n\r\n  const updateUser = async (updatedUser) => {\r\n    try {\r\n      const response = await axios.put(`http://localhost:8000/api/users/${user.id}`, updatedUser, { withCredentials: true });\r\n      setUser(response.data);\r\n      console.log('User updated successfully');\r\n    } catch (error) {\r\n      console.error('Failed to update user', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const fetchPosts = async (userId) => {\r\n    try {\r\n      const response = await makeRequest.get('/posts', { params: { userId } });\r\n      setPosts(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch posts', error);\r\n    }\r\n  };\r\n\r\n  const createPost = async (newPost) => {\r\n    try {\r\n      const response = await makeRequest.post('/posts', newPost);\r\n      setPosts((prevPosts) => [response.data, ...prevPosts]);\r\n    } catch (error) {\r\n      console.error('Failed to create post', error);\r\n    }\r\n  };\r\n\r\n/*   const deletePost = async (postId) => {\r\n    try {\r\n      await makeRequest.delete(`/posts/${postId}`);\r\n      setPosts((prevPosts) => prevPosts.filter(post => post.id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete post', error);\r\n    }\r\n  }; */\r\n\r\n  const fetchComments = async (postId) => {\r\n    try {\r\n      const response = await makeRequest.get('/comments', { params: { postId } });\r\n      setComments(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch comments', error);\r\n    }\r\n  };\r\n  \r\n  const createComment = async (newComment) => {\r\n    try {\r\n      const response = await makeRequest.post('/comments', newComment);\r\n      setComments((prevComments) => [response.data, ...prevComments]);\r\n    } catch (error) {\r\n      console.error('Failed to create comment', error);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  const fetchLikes = async (postId) => {\r\n    try {\r\n      const response = await makeRequest.get('/likes', { params: { postId } });\r\n      setLikes((prevLikes) => ({\r\n        ...prevLikes,\r\n        [postId]: response.data,\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to fetch likes', error);\r\n    }\r\n  };\r\n\r\n  const addLike = async (postId, userId) => {\r\n    try {\r\n      await makeRequest.post('/likes', { postId });\r\n      setLikes((prevLikes) => ({\r\n        ...prevLikes,\r\n        [postId]: [...(prevLikes[postId] || []), userId],\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to add like', error);\r\n    }\r\n  };\r\n\r\n  const removeLike = async (postId, userId) => {\r\n    try {\r\n      await makeRequest.delete('/likes', { params: { postId } });\r\n      setLikes((prevLikes) => ({\r\n        ...prevLikes,\r\n        [postId]: (prevLikes[postId] || []).filter((id) => id !== userId),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to remove like', error);\r\n    }\r\n  };\r\n\r\n  const deletePost = async (postId) => {\r\n    try {\r\n      await makeRequest.delete(`/posts/${postId}`);\r\n      setPosts((prevPosts) => prevPosts.filter((post) => post.id !== postId));\r\n    } catch (error) {\r\n      console.error('Failed to delete post', error);\r\n    }\r\n  };\r\n\r\n  const fetchRelationship = async (userId) => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8000/api/relationships', { params: { userId } });\r\n      setRelationship(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch relationship', error);\r\n    }\r\n  };\r\n  \r\n  const addRelationship = async (userId) => {\r\n    try {\r\n      await axios.post('http://localhost:8000/api/relationships', { userId });\r\n      setRelationship((prev) => [...prev, userId]);\r\n    } catch (error) {\r\n      console.error('Failed to add relationship', error);\r\n    }\r\n  };\r\n  \r\n  const removeRelationship = async (userId) => {\r\n    try {\r\n      await axios.delete('http://localhost:8000/api/relationships', { params: { userId } });\r\n      setRelationship((prev) => prev.filter((id) => id !== userId));\r\n    } catch (error) {\r\n      console.error('Failed to remove relationship', error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <PostsContext.Provider value={{ posts, fetchPosts, createPost, deletePost, createComment, comments, fetchComments, fetchLikes, likes, addLike, removeLike, fetchUser, user, fetchRelationship, relationship, addRelationship, removeRelationship, updateUser }}>\r\n      {children}\r\n    </PostsContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}